/* 과제) 비교 : 표현식들의 결과를 예측하기
    5 > 4 -> true
    "apple" > "pineapple" -> false
    "2" > "12" -> true(문자열 비교로 2가 1보다 크기 때문)
    undefined == null -> true
    undefined === null -> false
    null == "\n0\n" -> false
    null === +"\n0\n" -> false
*/

/* 비교 연산자 : 피연산자 사이의 상대적인 크기를 판단하여, 참(true)과 거짓(false)을 반환(boolean형으로 반환)
        - 모두 두 개의 피연산자를 가지는 이항 연산자이며, 피연산자들의 결합 방향은 왼쪽에서 오른쪽이다.
        ※기호
            ==(equal): 왼쩍 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환
                  같음(동등)은 등호(=)가 두 개 연달아 오는 것을 의미 -> a = b일때는 a의 값이 b라는 것을 의미한다.
            ===(strinct equal): 왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환

                ※ == / === 은 서로 같으면 참(true)에서 비슷하지만, == 연산자는 다른 type의 피연산자를 강제로 같은 타입으로
                  변환하여 처리하지만, === 연산자는 type의 변환 없이 두 피연산자의 값이 같고 type도 같아야 참(true)를 반환

            !=  : 왼쪽 피연산자와 오른쪽 피연산자의 갑시 같지 않으면 참을 반환() 
                  같지앖음(부등)은 수학 기호 ≠ 는 자바스크립에선 != 으로 나타남, 할당 연산자 = 앞에 느낌표(!)를 붙여서 표시
            !== : 왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환
            >   : 왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환
            >=  : 왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환
            <   : 왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환
            <=  : 왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환

        ex) alert( 2 > 1 ); -> true
            alert( 2 == 1 ); -> false
            alert( 2 != 1 ); -> true

            - 반환된 불린값은 다른 여타 값처럼 변수에 할당 할 수 있다.

            let result = 5 > 4; -> 비교 결과를 변수에 저장
            alert(result); -> true

    문자열 비교 : Javascript는 사전 순으로 문자열을 비교, '사전편집(Iexicographical)'순 이라고 불리기도 한다.
                
                alert( 'Z' > 'A' ); -> true
                alert( 'Glow' > 'Glee' ) -> true
                alert( 'Bee' > 'Be' ) -> true

        ※ 문자열 비교 시 적용 알고리즘
            1. 두 문자열의 첫 글자를 비교
            2. 첫 번째 문자열의 첫 글자가 다른 문자열의 첫 글자보다 크면(작으면), 첫 번째 문자열이 두 번째 문자열보다 크다고(작다고)
               결론 내고 비교를 종료
            3. 두 문자열의 첫 글자가 같으면 두 번째 글자를 같은 방식으로 비교
            4. 글자 간 비교가 끝날 때까지 이 과정을 반복
            5. 비교가 종료되었고 문자열의 길이도 같다면 두 문자열은 동일하단 결론, 비교가 종료되었지만 두문자열의 길이가
               다르면 길이가 긴 문자열이 더 크다고 결론
               * 정확하게는 사전순이 아닌 유니코드 순이다.

        - 다른 형을 가진 값 간의 비교 : 비교하려는 값의 자료형이 다르면 Javascript는 이 값들을 숫자형으로 바꿈
                alert( true == 1 ); -> true
                alert( false == 0 ); -> true

    일치 연산자 : === 는 타입 변환이 안되는 것을 제외하고 동등 연산자 == 와 동일하게 동작하며, 일치하는 것으로 간주되려면 타입이 항상 같아야 한다.
        - 동등 연산자(equality operator) == 은 0과 false를 구별하지 못한다.

            alert( 0 == false ); -> true
            alert( '' == false); -> true

        - 일치 연산자(scrict equality operator) === 를 사용하면 형 변환 없이 값을 비교, 엄격한(strict) 동등 연산자이다.

            alert( 0 === false ); -> 피연산자의 형이 다르기 때문에 false를 반환

            * 일치 연산자가 동등 연산자의 엄격한 형태인 것처럼 불일치 연산자 !== 는 부등 연산자 !=의 엄격한 형태이다.
              일치 연산자는 동등 연산자보다 한 글자 더 길지만 비교 결과가 명확하기 때문에 에러가 발생할 확률을 줄여준다.

    null이나 undefined와 비교하기
        * null이나 undefined를 다른 값과 비교할 땐 예상치 않은 일들이 발생, 몇 가지 규칙을 살펴보자
            일치 연산자 === 를 사용하여 null과 undefined를 비교
                - 두 값의 자료형이 다르기 때문에 일치 비교 시 거짓이 반환
                    alert( null === undefined ); -> false
                - 동등 연산자 == 를 사용하여 null과 undefined를 비교
                    * 특별한 규칙이 적용돼 true가 반환, 동등 연산자는 null과 undefined를 각별한 커플 처럼 취급
                    alert( null == undefined ); -> true
                - 산술 연산자나 기타 비교 연산자 <, >, <=, >= 를 사용한 null과 undefined를 비교
                    * null과 undefined를 숫자형으로 변환, null은 0, undefined는 NaN으로 변환

    null vs 0
        alert( null > 0 ); -> false
        alert( null == 0 ); -> false
        alert( null >= 0 ); -> null <= 0의 경우도 true
        * > 에서 false이지만 >= 이 참(true)를 반환하는 이유는 기타 비교 연산자의 동작 원리에 따라 null이 숫자형으로 변환되어서이다.

    비교가 불가능한 undefined
        - undefined가 NaN으로 변환되어(숫자형으로 변환), NaN이 피연산자인 경우 비교 연산자는 항상 false를 반환 
            alert( undefined > 0 ); -> fasle
            alert( undefined < 0 ); -> false

        - undefined는 null이나 undefined와 같고 그 외의 값과는 같지 않기 때문에 false를 반환
            alert( undefined == 0 ); -> false

    함정 피하기
        - 일치 연산자 === 를 제외한 비교 연산자의 피연산자에 undefined나 null이 오지 않도록 특별히 주의
        - undefined나 null이 될 가능성이 있는 변수가 >=, >, <, <= 의 피연산자가 되지 않도록 주의, 명확한 의도를 갖고 있지 않은
          이상 undefined나 null이 될 가능성이 있다고 판단하여 처리하는 코드를 추가


    ※ 요약
        - 비교 연산자는 불린값을 반환
        - 문자열은 문자 단위로 비교되는데, 이때 비교 기준은 '사전'순이다
        - 서로 다른 타입의 값을 비교할 땐 숫자형으로 형 변환이 이뤄지고 난 후 비교가 진행(일치 연산자는 제외)
        - null과 undefined는 동등 비교(==) 시 서로 같지만 다른 값과는 같지 않음
        - null이나 undefined가 될 확률이 있는 변수가 > 또는 < 의 피연산자로 올 때는 주의, null/undefined 여부를 확인하는
          코드를 따로 추가하는 습관을 권유


*/