// 과제 1) 전위형과 후위형 : a,b,c,d에 각각 저장되는 값
let a = 1, b = 1; // a : 1 / b : 1
let c = ++a; // 2
let d = b++; // 1

// 과제 2) 할당 후 결과 예측하기 : 실행되고 난 후, a와 x에 각각 저장되는 값
// let a = 2; -> a : 2
// let x = 1 + (a *= 2);-> x : 5

/* 과제 3) 형 변환 : 결과 예측
"" + 1 + 0 -> 10
"" - 1 + 0 -> 1
true + false -> 1
6 / "3" -> 2
"2" * "3" -> 6
4 + 5 + "px" -> 9px
"$" + 4 + 5 ->$45
"4" - 2 -> 2
"4px" - 2 -> NaN
"   -9  " + 5 -> -9 5
"   -9  " - 5 -> -14
null + 1 -> 1
undefined + 1 -> NaN
"    \t  \n" - 2 -> -2

*/

// 과제 4) 덧셈 고치기 : 사용자에게 숫자 2개를 입력받은 다음 그 합을 보여준다.
let q = prompt("덧셈할 첫 번째 숫자를 입력하세요.", 1);
let w = prompt("덧셈할 두 번째 숫자를 입력하세요.", 2);
alert(+q + +w);


/* 기본 연산자와 수학(+, *, -, /, %[나머지], **[거듭제곱 : 2 ** 4 -> 2 * 2 * 2 * 2 ] 과 같은 연산) 

    Javascript의 표현식과 할당, 비교, 산술, 비트 계산, 논리, 문자열, 삼항 등 여러 가지 연산자를 설명
            ※   

    * 삼항 연산자 : 피연산자, 이항 연산자, 단항 연산자 ( comparingOperator.js 파일에 정리되어 있는 '?' 연산자도 삼항(조건) 연산자이다.)
        - 피연산자는 연산(operation)의 대상이 되는 데이터를 의미하며 인수(argument)라는 용어로도 불린다.
            ex) x + y 의 경우 x, y가 피연산자이다.
        - 이항 연산자는 하나는 좌변에 다른 하나는 우변에 두개의 피연산자가 필요
            ex) 피연산자1 연산자 피연산자2 -> 3 + 4 /  x * y 의 형태
        - 단항 연산자는 연산자 뒤에든 앞에든 하나의 피연산자를 필요로 함
            ex) 연산자 피연산자 / 피연산자 연산자 -> x++ / ++x 의 형태

    이항 연산자 ' + '와 문자열 연결
        - 연산자 + 의 피연산자로 문자열이 전달되면 덧셈 연산자는 덧셈이 아닌 문자열을 병합(연결)
        - 피연산자 중 하나가 문자열이면 다른 하나도 문자열로 변환된다.(숫서는 중요하지 않음)
        
            let s = "my" + "string";
            alert(s); -> mystring

            alert('1' + 2); -> "12"
            alert(2 + '1'); -> "21"
            alert( 2 + 2 + '1'); -> '221'이 아닌 '41'로 출력

        * + 가 아닌 다른 산술 연산자의 경우 6 - '2' -> 4 /  '6' / '2' -> 3 처럼 형변환 후 연산이 진행된다.
    
    단항 연산자 + 와 숫자형으로의 변환
        - 숫자에 단항 덧셈 연산자를 붙이면 아무런 동작이 없지만, 피연산자가 숫자가 아닌 경우에는 숫자형으로의 변환이 발생
        - 단항 덧셈 연산자는 짧은 문법으로 Number(...)와 동일한 일을 할 수 있다.

            let x = 1;
            alert( +x ); -> 1
            let y = -2;
            alert( +y ); -> -2

            * 숫자형이 아닌 피연산자는 숫자형으로 변환
            alert( +true ); -> 1
            alert( +"" ); -> 0

        - HTML 폼(form) 필드에서 값을 가져오는 경우 문자열의 형태로 많이 넘어온다.

            let apples = "2";
            let oranges = "3";

            alert( apples + oranges ); -> 이항 덧셈 연산자의 문자열 연결로 23이 나온다.

            * 2 + 3 의 형태로 나오게 하려면 단항 덧셈 연산자를 사용해서 피연산자를 숫자형으로 변환하면 된다.
            
            alert( +apples + +oranges); -> 5

    ※ 연산자 우선순위(하나의 표현식에 둘 이상의 연산자가 있는 경우)를 참고
        - 괄호 : 모든 연산자보다 우선순위가 높기 때문에 자바스크립트에서 정의한 연산자 우선순위를 무력화 시킴 
            ex) ( 1 + 2 ) * 2 -> 괄호를 먼저 처리 후 *2를 실행
    
    할당 연산자
        - 오른쪽 피연산자의 값을 왼쪽 피연산자에 할당하는 것, 기본적인 할당 연산자는 오른쪽의 피연산자 값을 왼쪽 피연산자 값에
          할당하는 등호(=)이다.
            -> x = y -> y값을 x에 할당 하는 것
        
            let x = 2 * 2 + 1;
            alert(x); -> 5

    복합 할당 연산자 : 변수에 연산자를 적용하고 그 결과를 같은 변수에 저장해야 하는 경우가 종종 생김
                      let n = 2; n = n + 5; n = n * 2;의 경우,
                      +=와 *=의 잛은 문법으로 동일한 연산을 수행할 수 있다.
                      -> let n = 2; n += 5; n *= 2;

    증가 ·감소 연산자 : 숫자를 하나 늘리거나 줄이는 것에 자주 사용되는 연산
        - 증가(increment) 연산자 ++ 는 변수를 1 증가시킴
            
            let conter = 2;
            conter++; -> conter = conter +1 
            alert(conter); ->3

        - 감소(decrement) 연산자 -- 는 변수를 1 감소시킴

            let conter = 2;
            conter--; -> conter = conter -1
            alert( conter ); -> 1

            * conter++ : 후위형(postfix form)  / ++conter : 전위형(prefix form)  

                let conter = 1;
                alert(2 * ++conter); -> 4
                alert( 2 * conter++ ); -> 기존값을 반환하기에 2가 출력 그 후의 conter의 값이 2가 된다.
            
    비트 연산자(bitwise operator) : 인수를 32비트 정수로 변환하여 이진 연산을 수행
        * 연산자 목록
            - 비트 AND(&)
            - 비트 OR(|)
            - 비트 XOR(^)
            - 비트 NOT(~)
            - 왼쪽 시프트(LEFT SHIFT : <<)
            - 오른쪽 시프틑(RIGHT SHIFT : >>) 
            - 부호 없는 오른쪽 시프트(ZERO-FILL RIGHT SHIFT : >>>)

        - 비트 연산자는 저수준(2진 표현)에서 숫자를 다뤄야 할 때 쓰이므로 흔하게 쓰이진 않는다.

    쉼표 연산자(comma operato) : , 는 보기 힘든 연산자로 특이한 연산자 중 하나이다.
                                코드를 짧게 쓰려는 의도로 가끔 사용된다.

            let a = (1 + 2, 3 + 4);
            alert(a); -> 1+2는 평가 되지만 버려지고 3+4의 결과인 7이 출력된다.



        
        

        




    
    




*/